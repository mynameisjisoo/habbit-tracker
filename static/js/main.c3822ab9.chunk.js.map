{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/header.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","inputRef","React","createRef","formRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Component","Header","totalCount","App","state","item","setState","filter","Date","now","handleReset","countHabits","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3822ab9.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass Habit extends PureComponent {\r\n  //Lifecycle method 상황에 맞게 구현하면 됨\r\n  componentDidMount() {\r\n    //컴포넌트가 UI상에 등록될 때 호출(사용자에게 보여질 때)\r\n    console.log(`habit: ${this.props.habit.name} mounted`);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //컴포넌트가 없어질 때\r\n    console.log(`habit: ${this.props.habit.name}will unmount`);\r\n  }\r\n\r\n  // Habit는 자체적으로 갖고있는 state는 없고, 외부에서 받은 props를 보여주는 컵포넌트\r\n  handleIncrement = () => {\r\n    this.props.onIncrement(this.props.habit);\r\n  };\r\n  handleDecrement = () => {\r\n    this.props.onDecrement(this.props.habit);\r\n  };\r\n  handleDelete = () => {\r\n    this.props.onDelete(this.props.habit);\r\n  };\r\n\r\n  render() {\r\n    const { name, count } = this.props.habit; // 각각의 데이터 변수에 담기(동일한 이름 써야 함)\r\n\r\n    console.log(`habit: ${name}`);\r\n\r\n    return (\r\n      <li className='habit'>\r\n        <span className='habit-name'>{name}</span>\r\n        <span className='habit-count'>{count}</span>\r\n        <button\r\n          className='habit-button habit-increase'\r\n          onClick={this.handleIncrement}\r\n          // onClick={() => {\r\n          //   this.props.onIncrement(this.props.habit);\r\n          // }} handleIncremnt 없이 이렇게 익명함수로 전달 할 수도 있음\r\n        >\r\n          <i className='far fa-plus-square'></i>\r\n        </button>\r\n        <button\r\n          className='habit-button habit-decrease'\r\n          onClick={this.handleDecrement}\r\n        >\r\n          <i className='far fa-minus-square'></i>\r\n        </button>\r\n        <button\r\n          className='habit-button habit-delete'\r\n          onClick={this.handleDelete}\r\n        >\r\n          <i className='fas fa-trash'></i>\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habit;\r\n","import React, { memo } from 'react';\r\n//함수형 컴포넌트\r\n//memo :PureComponent처럼 props 변경없으면 랜더 안됨\r\nconst HabitAddForm = memo(props => {\r\n  console.log('habit Add form');\r\n  const inputRef = React.createRef(); //ref 생성\r\n  const formRef = React.createRef();\r\n\r\n  const onSubmit = event => {\r\n    event.preventDefault(); //submit발생하면 기본적으로 페이지 리프레시됨. 그래서 브라우저 기능 취소함\r\n    const name = inputRef.current.value; //ref안의 현재있는 요소의 value\r\n    name && props.onAdd(name); //name이 있으면(=비어있지않으면=true면) props.onAdd에 name전달\r\n    // this.inputRef.current.value = ''; 초기화 방법1\r\n    formRef.current.reset(); //초기화방법2\r\n  };\r\n  return (\r\n    <form ref={formRef} className='add-form' onSubmit={onSubmit}>\r\n      <input\r\n        ref={inputRef} //브라우저에 컴포넌트 표기되면 이걸통해 inputRef연결되서 input요소 읽어올 수 있음\r\n        type='text'\r\n        className='add-input'\r\n        placeholder='Please enter your habit'\r\n      />\r\n      <button className='add-btn'>add</button>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default HabitAddForm;\r\n","import React, { Component } from 'react';\r\nimport Habit from './habit';\r\nimport HabitAddForm from './habitAddForm';\r\n\r\nclass Habits extends Component {\r\n  handleAdd = name => {\r\n    this.props.onAdd(name);\r\n  };\r\n\r\n  render() {\r\n    console.log('habits');\r\n    return (\r\n      <div>\r\n        <HabitAddForm onAdd={this.handleAdd} />\r\n        <ul className='habits'>\r\n          {this.props.habits.map(habit => (\r\n            <Habit\r\n              key={habit.id}\r\n              habit={habit}\r\n              onIncrement={this.props.onIncrement}\r\n              onDecrement={this.props.onDecrement}\r\n              onDelete={this.props.onDelete}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <button className='habits-reset' onClick={this.props.onReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habits;\r\n","import React, { PureComponent } from 'react';\r\n\r\nclass Header extends PureComponent {\r\n  render() {\r\n    console.log('header');\r\n\r\n    return (\r\n      <header className='header'>\r\n        <i className=' header-logo fas fa-quidditch'></i>\r\n        <span>Habit Tracker </span>\r\n        <span className='header-count'>{this.props.totalCount}</span>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Header from './components/header';\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'coding', count: 0 }\n    ]\n  };\n\n  handleIncrement = habit => {\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        //전달받은 habit의 id (클릭한 habit의 id)와 habits 데이터의 id를 비교해서 같다면 (클릭한 habit이면)\n        return { ...habit, count: habit.count + 1 }; // 나머지 항목을 그대로 복사하면서 count는 +1한 걸 리턴\n      }\n      return item; // 클릭하지 않은 항목은 그대로 return item해서 기존의 것 리턴\n    });\n    this.setState({ habits });\n\n    ///\n    /*💩 spread syntax이용해서 복사해도 다차원객체는 주소값이 복사됨 (=원본객체에 영향줌)\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    habits[index].count++; */\n    /* this.setState({ habits: habits});  key인 habits(왼쪽, state의 habits)에 로컬변수habit(오른쪽)배열을 넣는다\n    habits:habits 처럼 key와 value가 동일한 이름이면 하나로 생략 가능 */\n\n    /**\n     * state를 직접 수정하지 않는 이유\n     * this.state.habits[index].count <- 이런식으로 오브젝트안의 데이터를 수정하면\n     * 결국은 동일한 오브젝트이기 때문에 동일하다고 판단해서 렌더링이 일어나지 않음\n     */\n  };\n\n  handleDecrement = habit => {\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count }; //새로운 객체를 생성해서 리턴해주므로 객체의 참조값이 변경되어 해당 객체만 렌더링\n      }\n      return item; //기존 this.state.habits 객체 그대로 리턴함(참조값 변경안되서 렌더링 안되게)\n    });\n    this.setState({ habits });\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count; //💩\n  };\n\n  handleDelete = habit => {\n    // filter을 이용해서 수정사항을 반영한 배열을 생성함\n    const habits = this.state.habits.filter(item => item.id !== habit.id);\n    this.setState({ habits });\n\n    //   다른방법: splice이용{\n    //   const habits = [...this.state.habits];\n    //   const index = habits.indexOf(habit);\n    //   habits.splice(index, 1);\n    //   this.setState({ habits });\n    //  }\n  };\n\n  handleAdd = name => {\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }]; //name:name <-동일한 이름은 생략가능\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map(habit => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n    // const habits = this.state.habits.map(habit => {\n    //   habit.count = 0;\n    //   return habit;\n    // });\n  };\n\n  countHabits = () => {\n    //카운트가 0개 이상인 habit만 갯수로 계산\n    return this.state.habits.filter(habit => habit.count > 0).length;\n  };\n\n  render() {\n    console.log('app');\n\n    return (\n      <div>\n        <Header totalCount={this.countHabits()} />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}